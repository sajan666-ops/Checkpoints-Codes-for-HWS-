Question 4: write a function that accepts an integer from 1 through 10,000, and returns the integer square root of that number. That sounds easy, but there are some catches:

You can’t use Swift’s built-in sqrt() function or similar – you need to find the square root yourself.
If the number is less than 1 or greater than 10,000 you should throw an “out of bounds” error.
You should only consider integer square roots – don’t worry about the square root of 3 being 1.732, for example.
If you can’t find the square root, throw a “no root” error.


My Answer: enum RootError: Error {
    case outOfBounds
    case noRoot
}

func integerSquareRoot(of number: Int) throws -> Int {
    guard number >= 1 && number <= 10_000 else {
        throw RootError.outOfBounds
    }

    for i in 1...number {
        if i * i == number {
            return i
        } else if i * i > number {
            break
        }
    }

    throw RootError.noRoot
}

// Example
do {
    let result = try integerSquareRoot(of: 7)
    print("✅ Root is \(result)")
} catch RootError.outOfBounds {
    print("❌ Number is out of allowed range")
} catch RootError.noRoot {
    print("❌ No perfect square root exists")
}
